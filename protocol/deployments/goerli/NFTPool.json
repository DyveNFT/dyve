{
  "address": "0x99CebDc70948fD42fd17345F2205688575049f44",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "getListedNFTs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listedOn",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tknAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tknId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "compliance",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "dailyFee",
              "type": "uint256"
            },
            {
              "internalType": "enum ReturnCondition",
              "name": "returnCondition",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "currency",
                  "type": "string"
                }
              ],
              "internalType": "struct NFTCollateral",
              "name": "collateral",
              "type": "tuple"
            }
          ],
          "internalType": "struct NFTListing[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listedOn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tknAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tknId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "complianceCheck",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "dailyFee",
          "type": "uint256"
        },
        {
          "internalType": "enum ReturnCondition",
          "name": "returnCondition",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "currency",
              "type": "string"
            }
          ],
          "internalType": "struct NFTCollateral",
          "name": "collateral",
          "type": "tuple"
        }
      ],
      "name": "listNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listedNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "listedOn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tknAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tknId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "compliance",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "dailyFee",
          "type": "uint256"
        },
        {
          "internalType": "enum ReturnCondition",
          "name": "returnCondition",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "currency",
              "type": "string"
            }
          ],
          "internalType": "struct NFTCollateral",
          "name": "collateral",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "listedNFTCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1878c5d1b86b2d785b7fadc5a343e2299f28a1a738a096d86430125406f7e3b",
  "receipt": {
    "to": null,
    "from": "0xc0Ce3eA2F4308EB18b5631BB0ef02D273c3Fc32B",
    "contractAddress": "0x99CebDc70948fD42fd17345F2205688575049f44",
    "transactionIndex": 3,
    "gasUsed": "1643725",
    "logsBloom": "0x
    "blockHash": "0xe1738ef41d4031b5f4b767668c7b5170b409b4b01a78c8b5ec6a04b15d4a66bf",
    "transactionHash": "0xa1878c5d1b86b2d785b7fadc5a343e2299f28a1a738a096d86430125406f7e3b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 7273150,
        "transactionHash": "0xa1878c5d1b86b2d785b7fadc5a343e2299f28a1a738a096d86430125406f7e3b",
        "address": "0x99CebDc70948fD42fd17345F2205688575049f44",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c0ce3ea2f4308eb18b5631bb0ef02d273c3fc32b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe1738ef41d4031b5f4b767668c7b5170b409b4b01a78c8b5ec6a04b15d4a66bf"
      }
    ],
    "blockNumber": 7273150,
    "cumulativeGasUsed": "3268929",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "8c1cf0ea0a565e0683dbb3eef857e4b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"getListedNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listedOn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tknAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tknId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"compliance\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dailyFee\",\"type\":\"uint256\"},{\"internalType\":\"enum ReturnCondition\",\"name\":\"returnCondition\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"}],\"internalType\":\"struct NFTCollateral\",\"name\":\"collateral\",\"type\":\"tuple\"}],\"internalType\":\"struct NFTListing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listedOn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tknAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tknId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"complianceCheck\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dailyFee\",\"type\":\"uint256\"},{\"internalType\":\"enum ReturnCondition\",\"name\":\"returnCondition\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"}],\"internalType\":\"struct NFTCollateral\",\"name\":\"collateral\",\"type\":\"tuple\"}],\"name\":\"listNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listedNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listedOn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tknAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tknId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"compliance\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dailyFee\",\"type\":\"uint256\"},{\"internalType\":\"enum ReturnCondition\",\"name\":\"returnCondition\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"}],\"internalType\":\"struct NFTCollateral\",\"name\":\"collateral\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listedNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getListedNFTs(address)\":{\"notice\":\"Retrieve all listings\"},\"listNFT(uint256,address,uint256,string,uint256,uint8,uint256,(uint256,string))\":{\"notice\":\"Listing function\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Must be implemented as per ERC1155 spec for the NFT Pool to receive ERC1155s\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Must be implemented as per ERC1155 spec for the NFT Pool to receive ERC1155s\"}},\"notice\":\"NFTPool managges all NFTs listed by the lender\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTPool.sol\":\"NFTPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTListing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\nStructure representing NFTListing for a Lender\\n*/\\nstruct NFTListing {\\n    uint256 listedOn;\\n    address tknAddress;\\n    uint256 tknId;\\n    string compliance;\\n    uint256 dailyFee;\\n    ReturnCondition returnCondition;\\n    uint256 expiry;\\n    NFTCollateral collateral;\\n}\\n\\nstruct NFTCollateral {\\n    uint256 amount;\\n    string currency;\\n}\\n\\nenum ReturnCondition {\\n    SAME,\\n    ANY\\n}\\n\",\"keccak256\":\"0xf1105100849cce749df1040c47af2001602cc43d1f62f83571679d3b4e1fb7df\",\"license\":\"MIT\"},\"contracts/NFTPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\n\\nimport \\\"./NFTListing.sol\\\";\\n\\n/**\\n * NFTPool managges all NFTs listed by the lender\\n */\\ncontract NFTPool is Ownable, ERC1155Receiver {\\n    // The main mapping maintaing the pool. Address represents the lender\\n    mapping(address => mapping(uint256 => NFTListing)) public listedNFT;\\n    // Each lender may have multiple NFTs listed\\n    mapping(address => uint256) public listedNFTCount;\\n\\n    /**\\n     * Listing function\\n     *\\n     */\\n    function listNFT(\\n        uint256 listedOn,\\n        address tknAddress,\\n        uint256 tknId,\\n        string memory complianceCheck,\\n        uint256 dailyFee,\\n        ReturnCondition returnCondition,\\n        uint256 expiry,\\n        NFTCollateral memory collateral\\n    ) public {\\n        // 1. Update the count of listings for this lender\\n        listedNFTCount[msg.sender] = listedNFTCount[msg.sender] + 1;\\n        uint256 currentCount = listedNFTCount[msg.sender];\\n        // 2. List NFT in the Pool\\n        listedNFT[msg.sender][currentCount] = NFTListing(\\n            listedOn,\\n            tknAddress,\\n            tknId,\\n            complianceCheck,\\n            dailyFee,\\n            returnCondition,\\n            expiry,\\n            collateral\\n        );\\n\\n        // 3. Transfer the NFT to this contract\\n        // IERC1155(tknAddress).safeTransferFrom(\\n        //     msg.sender,\\n        //     address(this),\\n        //     tknId,\\n        //     atAmount,\\n        //     \\\"0x00\\\"\\n        // );\\n    }\\n\\n    /**\\n    Retrieve all listings\\n     */\\n    function getListedNFTs(address lender)\\n        public\\n        view\\n        returns (NFTListing[] memory)\\n    {\\n        NFTListing[] memory ret = new NFTListing[](listedNFTCount[lender]);\\n        for (uint256 i = 0; i < listedNFTCount[lender]; i++) {\\n            ret[i] = listedNFT[lender][i];\\n        }\\n        return ret;\\n    }\\n\\n    /**\\n    Must be implemented as per ERC1155 spec for the NFT Pool to receive ERC1155s\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\n                    \\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n    Must be implemented as per ERC1155 spec for the NFT Pool to receive ERC1155s\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        return\\n            bytes4(\\n                keccak256(\\n                    \\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x25efc2c710c8f2afcb7a2702a20c4c1ed668770344d2e06e104b6b33f8c82388\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611c598061010d6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639cc938e2116100665780639cc938e21461014e578063bc197c811461017e578063e3a661da146101ae578063f23a6e61146101de578063f2fde38b1461020e5761009e565b806301ffc9a7146100a35780631a9b3694146100d3578063715018a61461010a5780638da5cb5b14610114578063927a758114610132575b600080fd5b6100bd60048036038101906100b89190611226565b61022a565b6040516100ca9190611668565b60405180910390f35b6100ed60048036038101906100e891906111e6565b6102a4565b6040516101019897969594939291906116f9565b60405180910390f35b610112610454565b005b61011c610468565b604051610129919061162b565b60405180910390f35b61014c60048036038101906101479190611253565b610491565b005b61016860048036038101906101639190611043565b610712565b6040516101759190611646565b60405180910390f35b61019860048036038101906101939190611070565b610a87565b6040516101a59190611683565b60405180910390f35b6101c860048036038101906101c39190611043565b610ab8565b6040516101d591906116de565b60405180910390f35b6101f860048036038101906101f3919061114c565b610ad0565b6040516102059190611683565b60405180910390f35b61022860048036038101906102239190611043565b610aff565b005b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061029d575061029c82610b83565b5b9050919050565b6001602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201549080600301805461030690611972565b80601f016020809104026020016040519081016040528092919081815260200182805461033290611972565b801561037f5780601f106103545761010080835404028352916020019161037f565b820191906000526020600020905b81548152906001019060200180831161036257829003601f168201915b5050505050908060040154908060050160009054906101000a900460ff169080600601549080600701604051806040016040529081600082015481526020016001820180546103cd90611972565b80601f01602080910402602001604051908101604052809291908181526020018280546103f990611972565b80156104465780601f1061041b57610100808354040283529160200191610446565b820191906000526020600020905b81548152906001019060200180831161042957829003601f168201915b505050505081525050905088565b61045c610bed565b6104666000610c6b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104dd9190611841565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506040518061010001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018560018111156105b7576105b6611a4d565b5b815260200184815260200183815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301908051906020019061068d929190610d37565b506080820151816004015560a08201518160050160006101000a81548160ff021916908360018111156106c3576106c2611a4d565b5b021790555060c0820151816006015560e082015181600701600082015181600001556020820151816001019080519060200190610701929190610d37565b505050905050505050505050505050565b60606000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205467ffffffffffffffff81111561076f5761076e611ada565b5b6040519080825280602002602001820160405280156107a857816020015b610795610dbd565b81526020019060019003908161078d5790505b50905060005b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811015610a7d57600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820180546108cb90611972565b80601f01602080910402602001604051908101604052809291908181526020018280546108f790611972565b80156109445780601f1061091957610100808354040283529160200191610944565b820191906000526020600020905b81548152906001019060200180831161092757829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900460ff16600181111561097c5761097b611a4d565b5b600181111561098e5761098d611a4d565b5b81526020016006820154815260200160078201604051806040016040529081600082015481526020016001820180546109c690611972565b80601f01602080910402602001604051908101604052809291908181526020018280546109f290611972565b8015610a3f5780601f10610a1457610100808354040283529160200191610a3f565b820191906000526020600020905b815481529060010190602001808311610a2257829003601f168201915b50505050508152505081525050828281518110610a5f57610a5e611aab565b5b60200260200101819052508080610a75906119d5565b9150506107ae565b5080915050919050565b60007fbc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621905098975050505050505050565b60026020528060005260406000206000915090505481565b60007ff23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf9790509695505050505050565b610b07610bed565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e9061169e565b60405180910390fd5b610b8081610c6b565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bf5610d2f565b73ffffffffffffffffffffffffffffffffffffffff16610c13610468565b73ffffffffffffffffffffffffffffffffffffffff1614610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c60906116be565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b828054610d4390611972565b90600052602060002090601f016020900481019282610d655760008555610dac565b82601f10610d7e57805160ff1916838001178555610dac565b82800160010185558215610dac579182015b82811115610dab578251825591602001919060010190610d90565b5b509050610db99190610e30565b5090565b60405180610100016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016000815260200160006001811115610e1657610e15611a4d565b5b815260200160008152602001610e2a610e4d565b81525090565b5b80821115610e49576000816000905550600101610e31565b5090565b604051806040016040528060008152602001606081525090565b6000610e7a610e75846117aa565b611785565b905082815260208101848484011115610e9657610e95611b22565b5b610ea1848285611930565b509392505050565b600081359050610eb881611bce565b92915050565b60008083601f840112610ed457610ed3611b0e565b5b8235905067ffffffffffffffff811115610ef157610ef0611b09565b5b602083019150836020820283011115610f0d57610f0c611b1d565b5b9250929050565b600081359050610f2381611be5565b92915050565b60008083601f840112610f3f57610f3e611b0e565b5b8235905067ffffffffffffffff811115610f5c57610f5b611b09565b5b602083019150836001820283011115610f7857610f77611b1d565b5b9250929050565b600081359050610f8e81611bfc565b92915050565b600082601f830112610fa957610fa8611b0e565b5b8135610fb9848260208601610e67565b91505092915050565b600060408284031215610fd857610fd7611b13565b5b610fe26040611785565b90506000610ff28482850161102e565b600083015250602082013567ffffffffffffffff81111561101657611015611b18565b5b61102284828501610f94565b60208301525092915050565b60008135905061103d81611c0c565b92915050565b60006020828403121561105957611058611b2c565b5b600061106784828501610ea9565b91505092915050565b60008060008060008060008060a0898b0312156110905761108f611b2c565b5b600061109e8b828c01610ea9565b98505060206110af8b828c01610ea9565b975050604089013567ffffffffffffffff8111156110d0576110cf611b27565b5b6110dc8b828c01610ebe565b9650965050606089013567ffffffffffffffff8111156110ff576110fe611b27565b5b61110b8b828c01610ebe565b9450945050608089013567ffffffffffffffff81111561112e5761112d611b27565b5b61113a8b828c01610f29565b92509250509295985092959890939650565b60008060008060008060a0878903121561116957611168611b2c565b5b600061117789828a01610ea9565b965050602061118889828a01610ea9565b955050604061119989828a0161102e565b94505060606111aa89828a0161102e565b935050608087013567ffffffffffffffff8111156111cb576111ca611b27565b5b6111d789828a01610f29565b92509250509295509295509295565b600080604083850312156111fd576111fc611b2c565b5b600061120b85828601610ea9565b925050602061121c8582860161102e565b9150509250929050565b60006020828403121561123c5761123b611b2c565b5b600061124a84828501610f14565b91505092915050565b600080600080600080600080610100898b03121561127457611273611b2c565b5b60006112828b828c0161102e565b98505060206112938b828c01610ea9565b97505060406112a48b828c0161102e565b965050606089013567ffffffffffffffff8111156112c5576112c4611b27565b5b6112d18b828c01610f94565b95505060806112e28b828c0161102e565b94505060a06112f38b828c01610f7f565b93505060c06113048b828c0161102e565b92505060e089013567ffffffffffffffff81111561132557611324611b27565b5b6113318b828c01610fc2565b9150509295985092959890939650565b600061134d8383611556565b905092915050565b61135e81611897565b82525050565b61136d81611897565b82525050565b600061137e826117eb565b611388818561180e565b93508360208202850161139a856117db565b8060005b858110156113d657848403895281516113b78582611341565b94506113c283611801565b925060208a0199505060018101905061139e565b50829750879550505050505092915050565b6113f1816118a9565b82525050565b611400816118b5565b82525050565b61140f8161191e565b82525050565b61141e8161191e565b82525050565b600061142f826117f6565b611439818561181f565b935061144981856020860161193f565b61145281611b31565b840191505092915050565b6000611468826117f6565b6114728185611830565b935061148281856020860161193f565b61148b81611b31565b840191505092915050565b60006114a3602683611830565b91506114ae82611b42565b604082019050919050565b60006114c6602083611830565b91506114d182611b91565b602082019050919050565b60006040830160008301516114f4600086018261160d565b506020830151848203602086015261150c8282611424565b9150508091505092915050565b6000604083016000830151611531600086018261160d565b50602083015184820360208601526115498282611424565b9150508091505092915050565b60006101008301600083015161156f600086018261160d565b5060208301516115826020860182611355565b506040830151611595604086018261160d565b50606083015184820360608601526115ad8282611424565b91505060808301516115c2608086018261160d565b5060a08301516115d560a0860182611406565b5060c08301516115e860c086018261160d565b5060e083015184820360e086015261160082826114dc565b9150508091505092915050565b61161681611914565b82525050565b61162581611914565b82525050565b60006020820190506116406000830184611364565b92915050565b600060208201905081810360008301526116608184611373565b905092915050565b600060208201905061167d60008301846113e8565b92915050565b600060208201905061169860008301846113f7565b92915050565b600060208201905081810360008301526116b781611496565b9050919050565b600060208201905081810360008301526116d7816114b9565b9050919050565b60006020820190506116f3600083018461161c565b92915050565b60006101008201905061170f600083018b61161c565b61171c602083018a611364565b611729604083018961161c565b818103606083015261173b818861145d565b905061174a608083018761161c565b61175760a0830186611415565b61176460c083018561161c565b81810360e08301526117768184611519565b90509998505050505050505050565b600061178f6117a0565b905061179b82826119a4565b919050565b6000604051905090565b600067ffffffffffffffff8211156117c5576117c4611ada565b5b6117ce82611b31565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061184c82611914565b915061185783611914565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561188c5761188b611a1e565b5b828201905092915050565b60006118a2826118f4565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60008190506118ef82611bba565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611929826118e1565b9050919050565b82818337600083830152505050565b60005b8381101561195d578082015181840152602081019050611942565b8381111561196c576000848401525b50505050565b6000600282049050600182168061198a57607f821691505b6020821081141561199e5761199d611a7c565b5b50919050565b6119ad82611b31565b810181811067ffffffffffffffff821117156119cc576119cb611ada565b5b80604052505050565b60006119e082611914565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a1357611a12611a1e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60028110611bcb57611bca611a4d565b5b50565b611bd781611897565b8114611be257600080fd5b50565b611bee816118b5565b8114611bf957600080fd5b50565b60028110611c0957600080fd5b50565b611c1581611914565b8114611c2057600080fd5b5056fea26469706673582212207d46a8ce617ce3376871d9a336fc0f34021adc056ca13eae6cd61d4da072270864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80639cc938e2116100665780639cc938e21461014e578063bc197c811461017e578063e3a661da146101ae578063f23a6e61146101de578063f2fde38b1461020e5761009e565b806301ffc9a7146100a35780631a9b3694146100d3578063715018a61461010a5780638da5cb5b14610114578063927a758114610132575b600080fd5b6100bd60048036038101906100b89190611226565b61022a565b6040516100ca9190611668565b60405180910390f35b6100ed60048036038101906100e891906111e6565b6102a4565b6040516101019897969594939291906116f9565b60405180910390f35b610112610454565b005b61011c610468565b604051610129919061162b565b60405180910390f35b61014c60048036038101906101479190611253565b610491565b005b61016860048036038101906101639190611043565b610712565b6040516101759190611646565b60405180910390f35b61019860048036038101906101939190611070565b610a87565b6040516101a59190611683565b60405180910390f35b6101c860048036038101906101c39190611043565b610ab8565b6040516101d591906116de565b60405180910390f35b6101f860048036038101906101f3919061114c565b610ad0565b6040516102059190611683565b60405180910390f35b61022860048036038101906102239190611043565b610aff565b005b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061029d575061029c82610b83565b5b9050919050565b6001602052816000526040600020602052806000526040600020600091509150508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201549080600301805461030690611972565b80601f016020809104026020016040519081016040528092919081815260200182805461033290611972565b801561037f5780601f106103545761010080835404028352916020019161037f565b820191906000526020600020905b81548152906001019060200180831161036257829003601f168201915b5050505050908060040154908060050160009054906101000a900460ff169080600601549080600701604051806040016040529081600082015481526020016001820180546103cd90611972565b80601f01602080910402602001604051908101604052809291908181526020018280546103f990611972565b80156104465780601f1061041b57610100808354040283529160200191610446565b820191906000526020600020905b81548152906001019060200180831161042957829003601f168201915b505050505081525050905088565b61045c610bed565b6104666000610c6b565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104dd9190611841565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506040518061010001604052808a81526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018781526020018681526020018560018111156105b7576105b6611a4d565b5b815260200184815260200183815250600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301908051906020019061068d929190610d37565b506080820151816004015560a08201518160050160006101000a81548160ff021916908360018111156106c3576106c2611a4d565b5b021790555060c0820151816006015560e082015181600701600082015181600001556020820151816001019080519060200190610701929190610d37565b505050905050505050505050505050565b60606000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205467ffffffffffffffff81111561076f5761076e611ada565b5b6040519080825280602002602001820160405280156107a857816020015b610795610dbd565b81526020019060019003908161078d5790505b50905060005b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811015610a7d57600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820180546108cb90611972565b80601f01602080910402602001604051908101604052809291908181526020018280546108f790611972565b80156109445780601f1061091957610100808354040283529160200191610944565b820191906000526020600020905b81548152906001019060200180831161092757829003601f168201915b50505050508152602001600482015481526020016005820160009054906101000a900460ff16600181111561097c5761097b611a4d565b5b600181111561098e5761098d611a4d565b5b81526020016006820154815260200160078201604051806040016040529081600082015481526020016001820180546109c690611972565b80601f01602080910402602001604051908101604052809291908181526020018280546109f290611972565b8015610a3f5780601f10610a1457610100808354040283529160200191610a3f565b820191906000526020600020905b815481529060010190602001808311610a2257829003601f168201915b50505050508152505081525050828281518110610a5f57610a5e611aab565b5b60200260200101819052508080610a75906119d5565b9150506107ae565b5080915050919050565b60007fbc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621905098975050505050505050565b60026020528060005260406000206000915090505481565b60007ff23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf9790509695505050505050565b610b07610bed565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6e9061169e565b60405180910390fd5b610b8081610c6b565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bf5610d2f565b73ffffffffffffffffffffffffffffffffffffffff16610c13610468565b73ffffffffffffffffffffffffffffffffffffffff1614610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c60906116be565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b828054610d4390611972565b90600052602060002090601f016020900481019282610d655760008555610dac565b82601f10610d7e57805160ff1916838001178555610dac565b82800160010185558215610dac579182015b82811115610dab578251825591602001919060010190610d90565b5b509050610db99190610e30565b5090565b60405180610100016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016000815260200160006001811115610e1657610e15611a4d565b5b815260200160008152602001610e2a610e4d565b81525090565b5b80821115610e49576000816000905550600101610e31565b5090565b604051806040016040528060008152602001606081525090565b6000610e7a610e75846117aa565b611785565b905082815260208101848484011115610e9657610e95611b22565b5b610ea1848285611930565b509392505050565b600081359050610eb881611bce565b92915050565b60008083601f840112610ed457610ed3611b0e565b5b8235905067ffffffffffffffff811115610ef157610ef0611b09565b5b602083019150836020820283011115610f0d57610f0c611b1d565b5b9250929050565b600081359050610f2381611be5565b92915050565b60008083601f840112610f3f57610f3e611b0e565b5b8235905067ffffffffffffffff811115610f5c57610f5b611b09565b5b602083019150836001820283011115610f7857610f77611b1d565b5b9250929050565b600081359050610f8e81611bfc565b92915050565b600082601f830112610fa957610fa8611b0e565b5b8135610fb9848260208601610e67565b91505092915050565b600060408284031215610fd857610fd7611b13565b5b610fe26040611785565b90506000610ff28482850161102e565b600083015250602082013567ffffffffffffffff81111561101657611015611b18565b5b61102284828501610f94565b60208301525092915050565b60008135905061103d81611c0c565b92915050565b60006020828403121561105957611058611b2c565b5b600061106784828501610ea9565b91505092915050565b60008060008060008060008060a0898b0312156110905761108f611b2c565b5b600061109e8b828c01610ea9565b98505060206110af8b828c01610ea9565b975050604089013567ffffffffffffffff8111156110d0576110cf611b27565b5b6110dc8b828c01610ebe565b9650965050606089013567ffffffffffffffff8111156110ff576110fe611b27565b5b61110b8b828c01610ebe565b9450945050608089013567ffffffffffffffff81111561112e5761112d611b27565b5b61113a8b828c01610f29565b92509250509295985092959890939650565b60008060008060008060a0878903121561116957611168611b2c565b5b600061117789828a01610ea9565b965050602061118889828a01610ea9565b955050604061119989828a0161102e565b94505060606111aa89828a0161102e565b935050608087013567ffffffffffffffff8111156111cb576111ca611b27565b5b6111d789828a01610f29565b92509250509295509295509295565b600080604083850312156111fd576111fc611b2c565b5b600061120b85828601610ea9565b925050602061121c8582860161102e565b9150509250929050565b60006020828403121561123c5761123b611b2c565b5b600061124a84828501610f14565b91505092915050565b600080600080600080600080610100898b03121561127457611273611b2c565b5b60006112828b828c0161102e565b98505060206112938b828c01610ea9565b97505060406112a48b828c0161102e565b965050606089013567ffffffffffffffff8111156112c5576112c4611b27565b5b6112d18b828c01610f94565b95505060806112e28b828c0161102e565b94505060a06112f38b828c01610f7f565b93505060c06113048b828c0161102e565b92505060e089013567ffffffffffffffff81111561132557611324611b27565b5b6113318b828c01610fc2565b9150509295985092959890939650565b600061134d8383611556565b905092915050565b61135e81611897565b82525050565b61136d81611897565b82525050565b600061137e826117eb565b611388818561180e565b93508360208202850161139a856117db565b8060005b858110156113d657848403895281516113b78582611341565b94506113c283611801565b925060208a0199505060018101905061139e565b50829750879550505050505092915050565b6113f1816118a9565b82525050565b611400816118b5565b82525050565b61140f8161191e565b82525050565b61141e8161191e565b82525050565b600061142f826117f6565b611439818561181f565b935061144981856020860161193f565b61145281611b31565b840191505092915050565b6000611468826117f6565b6114728185611830565b935061148281856020860161193f565b61148b81611b31565b840191505092915050565b60006114a3602683611830565b91506114ae82611b42565b604082019050919050565b60006114c6602083611830565b91506114d182611b91565b602082019050919050565b60006040830160008301516114f4600086018261160d565b506020830151848203602086015261150c8282611424565b9150508091505092915050565b6000604083016000830151611531600086018261160d565b50602083015184820360208601526115498282611424565b9150508091505092915050565b60006101008301600083015161156f600086018261160d565b5060208301516115826020860182611355565b506040830151611595604086018261160d565b50606083015184820360608601526115ad8282611424565b91505060808301516115c2608086018261160d565b5060a08301516115d560a0860182611406565b5060c08301516115e860c086018261160d565b5060e083015184820360e086015261160082826114dc565b9150508091505092915050565b61161681611914565b82525050565b61162581611914565b82525050565b60006020820190506116406000830184611364565b92915050565b600060208201905081810360008301526116608184611373565b905092915050565b600060208201905061167d60008301846113e8565b92915050565b600060208201905061169860008301846113f7565b92915050565b600060208201905081810360008301526116b781611496565b9050919050565b600060208201905081810360008301526116d7816114b9565b9050919050565b60006020820190506116f3600083018461161c565b92915050565b60006101008201905061170f600083018b61161c565b61171c602083018a611364565b611729604083018961161c565b818103606083015261173b818861145d565b905061174a608083018761161c565b61175760a0830186611415565b61176460c083018561161c565b81810360e08301526117768184611519565b90509998505050505050505050565b600061178f6117a0565b905061179b82826119a4565b919050565b6000604051905090565b600067ffffffffffffffff8211156117c5576117c4611ada565b5b6117ce82611b31565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061184c82611914565b915061185783611914565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561188c5761188b611a1e565b5b828201905092915050565b60006118a2826118f4565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60008190506118ef82611bba565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611929826118e1565b9050919050565b82818337600083830152505050565b60005b8381101561195d578082015181840152602081019050611942565b8381111561196c576000848401525b50505050565b6000600282049050600182168061198a57607f821691505b6020821081141561199e5761199d611a7c565b5b50919050565b6119ad82611b31565b810181811067ffffffffffffffff821117156119cc576119cb611ada565b5b80604052505050565b60006119e082611914565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a1357611a12611a1e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60028110611bcb57611bca611a4d565b5b50565b611bd781611897565b8114611be257600080fd5b50565b611bee816118b5565b8114611bf957600080fd5b50565b60028110611c0957600080fd5b50565b611c1581611914565b8114611c2057600080fd5b5056fea26469706673582212207d46a8ce617ce3376871d9a336fc0f34021adc056ca13eae6cd61d4da072270864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getListedNFTs(address)": {
        "notice": "Retrieve all listings"
      },
      "listNFT(uint256,address,uint256,string,uint256,uint8,uint256,(uint256,string))": {
        "notice": "Listing function"
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "notice": "Must be implemented as per ERC1155 spec for the NFT Pool to receive ERC1155s"
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "Must be implemented as per ERC1155 spec for the NFT Pool to receive ERC1155s"
      }
    },
    "notice": "NFTPool managges all NFTs listed by the lender",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/NFTPool.sol:NFTPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1947,
        "contract": "contracts/NFTPool.sol:NFTPool",
        "label": "listedNFT",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTListing)1921_storage))"
      },
      {
        "astId": 1951,
        "contract": "contracts/NFTPool.sol:NFTPool",
        "label": "listedNFTCount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(ReturnCondition)1929": {
        "encoding": "inplace",
        "label": "enum ReturnCondition",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(NFTListing)1921_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTListing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(NFTListing)1921_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(NFTListing)1921_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTListing)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTListing)1921_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(NFTCollateral)1926_storage": {
        "encoding": "inplace",
        "label": "struct NFTCollateral",
        "members": [
          {
            "astId": 1923,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1925,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "currency",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NFTListing)1921_storage": {
        "encoding": "inplace",
        "label": "struct NFTListing",
        "members": [
          {
            "astId": 1904,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "listedOn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1906,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "tknAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1908,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "tknId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1910,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "compliance",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1912,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "dailyFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1915,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "returnCondition",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(ReturnCondition)1929"
          },
          {
            "astId": 1917,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "expiry",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1920,
            "contract": "contracts/NFTPool.sol:NFTPool",
            "label": "collateral",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(NFTCollateral)1926_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}