{
  "language": "Solidity",
  "sources": {
    "contracts/NFTLoanVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./NFTListing.sol\";\n\n/**\n * Contract to describe all Loans, the collateral and conditions accepted by the borrower\n */\ncontract NFTLoanVault is Ownable {\n    // Structure to represent loan - from listing to all agreed on conditions\n    struct NFTLoan {\n        uint256 borrowedOn;\n        NFTListing listing;\n        uint256 sold;\n        uint256 paid;\n        int256 PL;\n        uint256 loanExpiry;\n        uint256 returnedTknId;\n        address returnedCollectionAddress;\n        LoanStatus status;\n        uint256 returnedOn;\n    }\n\n    enum LoanStatus {\n        INITIAL,\n        RETURN_W_DYVE,\n        RETURN_SELF,\n        FORTEIT_COLLATERAL\n    }\n\n    //borrower's loans\n    mapping(address => mapping(uint256 => NFTLoan)) public loanedNFT;\n    uint256 allLoans;\n\n    // Each borrower may have multiple NFTs borrowed\n    mapping(address => uint256) public loanedNFTCount;\n\n    // Manage borrowers\n    mapping(address => bool) internal borrowerExists;\n    address[] borrowers;\n\n    function addBorrower(address borrower) internal {\n        if (!borrowerExists[borrower]) {\n            borrowers.push(borrower);\n            borrowerExists[borrower] = true;\n        }\n    }\n\n    function borrow(\n        address borrower,\n        NFTListing memory listing,\n        uint256 loanExpiry\n    ) public {\n        addBorrower(msg.sender);\n        allLoans = allLoans + 1;\n        loanedNFTCount[borrower] = loanedNFTCount[borrower] + 1;\n        uint256 currentCount = loanedNFTCount[borrower];\n        loanedNFT[borrower][currentCount] = NFTLoan(\n            block.timestamp,\n            listing,\n            0,\n            0,\n            0,\n            loanExpiry,\n            0,\n            address(0),\n            LoanStatus.INITIAL,\n            0\n        );\n    }\n\n    /**\n     * Helper to load test data only\n     */\n    function borrowedOn(\n        address borrower,\n        NFTListing memory listing,\n        uint256 loanExpiry,\n        uint256 borroweOn,\n        uint256 price1,\n        uint256 price2,\n        int256 pl,\n        uint256 returnTknId,\n        address returnedCollectionAdress,\n        LoanStatus loanStatus,\n        uint256 returnedOn\n    ) public {\n        addBorrower(msg.sender);\n        allLoans = allLoans + 1;\n        uint256 currentCount = loanedNFTCount[borrower];\n        loanedNFT[borrower][currentCount] = NFTLoan(\n            borroweOn,\n            listing,\n            price1,\n            price2,\n            pl,\n            loanExpiry,\n            returnTknId,\n            returnedCollectionAdress,\n            loanStatus,\n            returnedOn\n        );\n        loanedNFTCount[borrower] = loanedNFTCount[borrower] + 1;\n    }\n\n    /**\n     *   Retrieve all Loans\n     */\n    function getAllLoans() public view returns (NFTLoan[] memory) {\n        NFTLoan[] memory ret = new NFTLoan[](allLoans);\n\n        for (uint256 j = 0; j < borrowers.length; j++) {\n            for (uint256 i = 0; i < loanedNFTCount[borrowers[j]]; i++) {\n                ret[i] = loanedNFT[borrowers[j]][i];\n            }\n        }\n        return ret;\n    }\n\n    /**\n     *   Testing helper\n     */\n    function getAllCount() public view returns (uint256) {\n        return getAllLoans().length;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/NFTListing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\nStructure representing NFTListing for a Lender\n*/\nstruct NFTListing {\n    uint256 listedOn;\n    address tknAddress;\n    uint256 tknId;\n    string compliance;\n    uint256 dailyFee;\n    ReturnCondition returnCondition;\n    uint256 expiry;\n    NFTCollateral collateral;\n}\n\nstruct NFTCollateral {\n    uint256 amount;\n    string currency;\n}\n\nenum ReturnCondition {\n    SAME,\n    ANY\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}