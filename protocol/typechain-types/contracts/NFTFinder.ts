/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type NFTListingStruct = {
  tknAddress: PromiseOrValue<string>;
  tknId: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  listingLength: PromiseOrValue<BigNumberish>;
};

export type NFTListingStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  tknAddress: string;
  tknId: BigNumber;
  amount: BigNumber;
  listingLength: BigNumber;
};

export type NFTRecommendationStruct = {
  listing: NFTListingStruct;
  tknAddress: PromiseOrValue<string>;
  tknId: PromiseOrValue<BigNumberish>;
};

export type NFTRecommendationStructOutput = [
  NFTListingStructOutput,
  string,
  BigNumber
] & { listing: NFTListingStructOutput; tknAddress: string; tknId: BigNumber };

export interface NFTFinderInterface extends utils.Interface {
  functions: {
    "getMatch((address,uint256,uint256,uint256))": FunctionFragment;
    "getMatchTknId((address,uint256,uint256,uint256))": FunctionFragment;
    "owner()": FunctionFragment;
    "recommendation(uint256)": FunctionFragment;
    "register((address,uint256,uint256,uint256))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMatch((address,uint256,uint256,uint256),address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMatch"
      | "getMatchTknId"
      | "owner"
      | "recommendation"
      | "register"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateMatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMatch",
    values: [NFTListingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatchTknId",
    values: [NFTListingStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recommendation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [NFTListingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMatch",
    values: [
      NFTListingStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMatchTknId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recommendation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMatch",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NFTFinder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTFinderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMatch(
      listing: NFTListingStruct,
      overrides?: CallOverrides
    ): Promise<[NFTRecommendationStructOutput]>;

    getMatchTknId(
      listing: NFTListingStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recommendation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [NFTListingStructOutput, string, BigNumber] & {
        listing: NFTListingStructOutput;
        tknAddress: string;
        tknId: BigNumber;
      }
    >;

    register(
      listing: NFTListingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMatch(
      listing: NFTListingStruct,
      recommendedCollection: PromiseOrValue<string>,
      recommendedId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getMatch(
    listing: NFTListingStruct,
    overrides?: CallOverrides
  ): Promise<NFTRecommendationStructOutput>;

  getMatchTknId(
    listing: NFTListingStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  recommendation(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [NFTListingStructOutput, string, BigNumber] & {
      listing: NFTListingStructOutput;
      tknAddress: string;
      tknId: BigNumber;
    }
  >;

  register(
    listing: NFTListingStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMatch(
    listing: NFTListingStruct,
    recommendedCollection: PromiseOrValue<string>,
    recommendedId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMatch(
      listing: NFTListingStruct,
      overrides?: CallOverrides
    ): Promise<NFTRecommendationStructOutput>;

    getMatchTknId(
      listing: NFTListingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recommendation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [NFTListingStructOutput, string, BigNumber] & {
        listing: NFTListingStructOutput;
        tknAddress: string;
        tknId: BigNumber;
      }
    >;

    register(
      listing: NFTListingStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMatch(
      listing: NFTListingStruct,
      recommendedCollection: PromiseOrValue<string>,
      recommendedId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getMatch(
      listing: NFTListingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMatchTknId(
      listing: NFTListingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recommendation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      listing: NFTListingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMatch(
      listing: NFTListingStruct,
      recommendedCollection: PromiseOrValue<string>,
      recommendedId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMatch(
      listing: NFTListingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMatchTknId(
      listing: NFTListingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recommendation(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      listing: NFTListingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMatch(
      listing: NFTListingStruct,
      recommendedCollection: PromiseOrValue<string>,
      recommendedId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
