/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type NFTCollateralStruct = {
  amount: PromiseOrValue<BigNumberish>;
  currency: PromiseOrValue<string>;
};

export type NFTCollateralStructOutput = [BigNumber, string] & {
  amount: BigNumber;
  currency: string;
};

export type NFTListingStruct = {
  listedOn: PromiseOrValue<BigNumberish>;
  tknAddress: PromiseOrValue<string>;
  tknId: PromiseOrValue<BigNumberish>;
  compliance: PromiseOrValue<string>;
  dailyFee: PromiseOrValue<BigNumberish>;
  returnCondition: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  collateral: NFTCollateralStruct;
};

export type NFTListingStructOutput = [
  BigNumber,
  string,
  BigNumber,
  string,
  BigNumber,
  number,
  BigNumber,
  NFTCollateralStructOutput
] & {
  listedOn: BigNumber;
  tknAddress: string;
  tknId: BigNumber;
  compliance: string;
  dailyFee: BigNumber;
  returnCondition: number;
  expiry: BigNumber;
  collateral: NFTCollateralStructOutput;
};

export interface NFTPoolInterface extends utils.Interface {
  functions: {
    "getListedNFTs(address)": FunctionFragment;
    "listNFT(uint256,address,uint256,string,uint256,uint8,uint256,(uint256,string))": FunctionFragment;
    "listedNFT(address,uint256)": FunctionFragment;
    "listedNFTCount(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getListedNFTs"
      | "listNFT"
      | "listedNFT"
      | "listedNFTCount"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "renounceOwnership"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getListedNFTs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      NFTCollateralStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listedNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listedNFTCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getListedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listedNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listedNFTCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NFTPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getListedNFTs(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTListingStructOutput[]]>;

    listNFT(
      listedOn: PromiseOrValue<BigNumberish>,
      tknAddress: PromiseOrValue<string>,
      tknId: PromiseOrValue<BigNumberish>,
      complianceCheck: PromiseOrValue<string>,
      dailyFee: PromiseOrValue<BigNumberish>,
      returnCondition: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      collateral: NFTCollateralStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listedNFT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        NFTCollateralStructOutput
      ] & {
        listedOn: BigNumber;
        tknAddress: string;
        tknId: BigNumber;
        compliance: string;
        dailyFee: BigNumber;
        returnCondition: number;
        expiry: BigNumber;
        collateral: NFTCollateralStructOutput;
      }
    >;

    listedNFTCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getListedNFTs(
    lender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTListingStructOutput[]>;

  listNFT(
    listedOn: PromiseOrValue<BigNumberish>,
    tknAddress: PromiseOrValue<string>,
    tknId: PromiseOrValue<BigNumberish>,
    complianceCheck: PromiseOrValue<string>,
    dailyFee: PromiseOrValue<BigNumberish>,
    returnCondition: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    collateral: NFTCollateralStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listedNFT(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      number,
      BigNumber,
      NFTCollateralStructOutput
    ] & {
      listedOn: BigNumber;
      tknAddress: string;
      tknId: BigNumber;
      compliance: string;
      dailyFee: BigNumber;
      returnCondition: number;
      expiry: BigNumber;
      collateral: NFTCollateralStructOutput;
    }
  >;

  listedNFTCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155BatchReceived(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getListedNFTs(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTListingStructOutput[]>;

    listNFT(
      listedOn: PromiseOrValue<BigNumberish>,
      tknAddress: PromiseOrValue<string>,
      tknId: PromiseOrValue<BigNumberish>,
      complianceCheck: PromiseOrValue<string>,
      dailyFee: PromiseOrValue<BigNumberish>,
      returnCondition: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      collateral: NFTCollateralStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    listedNFT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        number,
        BigNumber,
        NFTCollateralStructOutput
      ] & {
        listedOn: BigNumber;
        tknAddress: string;
        tknId: BigNumber;
        compliance: string;
        dailyFee: BigNumber;
        returnCondition: number;
        expiry: BigNumber;
        collateral: NFTCollateralStructOutput;
      }
    >;

    listedNFTCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getListedNFTs(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listNFT(
      listedOn: PromiseOrValue<BigNumberish>,
      tknAddress: PromiseOrValue<string>,
      tknId: PromiseOrValue<BigNumberish>,
      complianceCheck: PromiseOrValue<string>,
      dailyFee: PromiseOrValue<BigNumberish>,
      returnCondition: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      collateral: NFTCollateralStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listedNFT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listedNFTCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getListedNFTs(
      lender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listNFT(
      listedOn: PromiseOrValue<BigNumberish>,
      tknAddress: PromiseOrValue<string>,
      tknId: PromiseOrValue<BigNumberish>,
      complianceCheck: PromiseOrValue<string>,
      dailyFee: PromiseOrValue<BigNumberish>,
      returnCondition: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      collateral: NFTCollateralStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listedNFT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listedNFTCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
